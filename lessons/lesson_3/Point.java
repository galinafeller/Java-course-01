package lessons.lesson_3;

public class Point {
    int x, y; //поле класса (переменная, field)

    //Конструктор, нужен для инциализации полей
    //Имя конструктора всегда совпадает с именем класса
    Point (int newX, int newY) {
        x = newX;
        y = newY;
    }

    //может содержать методы (действия над данными) = выполнение n-ого количества кода
    // <тип возвращаемого значения> <имя метода>(<тип параметра 1> <название параметра 1>) { }
    //void - метод ничего не возвращает (т.е. нет результата работы метода) пример - поели - нет явного результата.
    void printPoint() {
        System.out.println("(" + x + ";" + y + ")");
    }

    //Сигнатура метода - название + параметры (важен порядок параметров и типов)
    //В классе не может быть два метода с одинаковой сигнатурой
    //При этом могут быть одинаковые названия, но тогда должны быть разные параметры - важны только типы, но не названия переменных

    //Перегруженный метод (перегрузка, overload)
    void printPoint(boolean verbose) {
        if (verbose) {
            System.out.println("Координаты точки (" + x + ";" + y + ")");
        } else {
            printPoint();
        }
    }

    //flip() - получить новый объект класса point с -x и -y

    //quadrant() - четверть, которой принадлежит координата
    // 2 | 1
    // -----
    // 3 | 4
    int quadrant() {
        if (x > 0 && y > 0) {
            //на строке return выполнение метода завершается и возвращается значение
            return 1;
        } else if (x < 0 && y > 0) {
            return 2;
        } else if (x < 0 && y < 0) {
            return 3;
        } else if (x > 0 && y < 0) {
            return 4;
        }
        //else{return 0;} - во всех случаях выполнения должен быть возвращаемый return
        return 0;
    }

    //Для примитивов значение по умолчанию 0 или false

     int[] flip() {
        int[] flipped = {};
         x = -x;
         y = -y;
         flipped[0] = x;
         flipped[1] = y;
        return flipped;
    }

}
